---
version: "3.8"
services:
    cassandra:
        container_name: streamr-dev-cassandra
        image: cassandra:3.11.5
        init: true
        networks:
            - streamr-network
        ports:
            # - "7000:7000" # Conflicts with "Control Centre" service on MacOS. Cassandra uses it for cluster communication, which isn't necessary in a single-node cluster.
            - "7001:7001"
            - "7199:7199"
            - "9042:9042"
            - "9160:9160"
        volumes:
            - type: volume
              source: data-cassandra
              target: /var/lib/cassandra
              volume:
                  nocopy: true
        healthcheck:
            test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
            interval: 5s
            timeout: 10s
            retries: 10
        restart: unless-stopped
    init-keyspace:
        container_name: streamr-dev-init-keyspace
        image: cassandra:3.11.5
        init: true
        networks:
            - streamr-network
        command: bash -c "sleep 5 && cqlsh cassandra -f /init_scripts/keyspace.cql && echo keyspace initialized"
        restart: on-failure # exits on success
        volumes:
            - type: bind
              source: ./cassandra_init_scripts
              target: /init_scripts
              read_only: true
              bind:
                  propagation: rprivate
        depends_on:
            - cassandra
    mysql:
        container_name: streamr-dev-mysql
        platform: linux/x86_64
        image: mysql:5.7
        init: true
        networks:
            - streamr-network
        ports:
            - "3306:3306"
        volumes:
            - type: volume
              source: data-mysql
              target: /var/lib/mysql
              volume:
                  nocopy: true
            - type: bind
              source: ./custom-mysql-settings.cnf
              target: /etc/mysql/conf.d/custom-mysql-settings.cnf
              read_only: true
              bind:
                  propagation: rprivate
        restart: unless-stopped
        environment:
            MYSQL_ROOT_PASSWORD: password
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
            interval: 5s
            timeout: 10s
            retries: 10
    nginx:
        container_name: streamr-dev-nginx
        image: nginx:1.25.0
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - type: bind
              source: ./custom-nginx-reverse-proxy.conf
              target: /etc/nginx/nginx.conf
              read_only: true
              bind:
                  propagation: rprivate
            - type: bind
              source: ./certs
              target: /etc/nginx/mounted-certs
              read_only: true
              bind:
                  propagation: rprivate
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost/health_check"]
            interval: 5s
            timeout: 10s
            retries: 10
    entry-point:
        container_name: streamr-dev-entry-point
        image: streamr/node:dev
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "40500:40500"
        command: npm exec -- entry-point
        healthcheck:
            test: ["CMD", "curl", "${STREAMR_BASE_URL}:40500"]
            interval: 1s
            timeout: 5s
            retries: 10
    broker-node-storage-1:
        container_name: streamr-dev-broker-node-storage-1
        image: streamr/node:dev
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "8890:8890"
            - "8891:8891"
            - "9000:9000"
            - "30315:30315"
        depends_on:
            - entry-point
            - init-keyspace
            - cassandra
        environment:
            STREAMR_URL: "${STREAMR_BASE_URL}"
            CASSANDRA_HOST: 10.200.10.1:9042
        command: npm exec -- streamr-broker configs/docker-1.env.json
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "http://localhost:8891/info"]
            interval: 30s
            timeout: 10s
            retries: 20
    broker-node-no-storage-1:
        container_name: streamr-dev-broker-node-no-storage-1
        image: streamr/node:dev
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "8790:8790"
            - "8791:8791"
            - "9100:9100"
            - "30316:30316"
        depends_on:
            - entry-point
        environment:
            STREAMR_URL: "${STREAMR_BASE_URL}"
        command: npm exec -- streamr-broker configs/docker-2.env.json
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "http://localhost:8791/info"]
            interval: 30s
            timeout: 10s
            retries: 20
    broker-node-no-storage-2:
        container_name: streamr-dev-broker-node-no-storage-2
        image: streamr/node:dev
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "8690:8690"
            - "8691:8691"
            - "9200:9200"
            - "30317:30317"
        depends_on:
            - entry-point
        environment:
            STREAMR_URL: "${STREAMR_BASE_URL}"
        command: npm exec -- streamr-broker configs/docker-3.env.json
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "http://localhost:8691/info"]
            interval: 30s
            timeout: 10s
            retries: 20
    platform:
        container_name: streamr-dev-platform
        image: streamr/platform:dev
        networks:
            - streamr-network
        ports:
            - "3333:80"
        depends_on:
            - parity-node0
        environment:
            DATA_UNIONS: "on"
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "http://localhost"]
            interval: 10s
            timeout: 10s
            retries: 60
    network-explorer:
        container_name: streamr-dev-network-explorer
        image: streamr/network-explorer:dev
        networks:
            - streamr-network
        ports:
            - "3334:80"
        depends_on:
            - tracker-1
            - tracker-2
            - tracker-3
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "http://localhost"]
            interval: 10s
            timeout: 10s
            retries: 60
    parity-node0:
        container_name: streamr-dev-parity-node0
        environment:
            CHAIN_ID: 0x2323
        image: streamr/open-ethereum-poa-mainchain-preload1:dev
        networks:
            - streamr-network
        ports:
            - "8545:8540"
            - "8450:8450"
            - "30309:30309"
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "--header", "Content-Type: application/json", "--data", '[{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1},{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}]', "http://localhost:8540/api/health"]
            interval: 1m30s
            timeout: 10s
            retries: 3
        command: --chain ./streamr-spec.json --config ./node0.toml
        volumes:
            - type: volume
              source: data-parity-node0
              target: /home/parity/parity_data
              volume:
                  nocopy: true
    parity-sidechain-node0:
        container_name: streamr-dev-parity-sidechain-node0
        environment:
            CHAIN_ID: 0x2325
        image: streamr/open-ethereum-poa-sidechain-preload1:dev
        networks:
            - streamr-network
        ports:
            - "8546:8540"
            - "8451:8450"
            - "30310:30309"
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "--header", "Content-Type: application/json", "--data", '[{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1},{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}]', "http://localhost:8540/api/health"]
            interval: 1m30s
            timeout: 10s
            retries: 3
        command: --chain ./streamr-spec.json --config ./node0.toml
        volumes:
            - type: volume
              source: data-parity-sidechain-node0
              target: /home/parity/parity_data
              volume:
                  nocopy: true
    graph-node:
        container_name: streamr-dev-thegraph-node
        image: graphprotocol/graph-node:v0.30.0
        restart: unless-stopped
        networks:
            - streamr-network
        ports:
            - '8000:8000'
            - '8001:8001'
            - '8020:8020'
            - '8030:8030'
            - '8040:8040'
        depends_on:
            - ipfs
            - postgres
            - parity-sidechain-node0
        environment:
            postgres_host: postgres
            postgres_user: streamr
            postgres_pass: let-me-in
            postgres_db: streamr
            ipfs: 'streamr-dev-ipfs:5001'
            ethereum: 'xDai:http://streamr-dev-parity-sidechain-node0:8540'
            RUST_LOG: info
            GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: "true"
        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "8000"]
            interval: 5s
            timeout: 10s
            retries: 10
    graph-deploy-streamregistry-subgraph:
        container_name: streamr-dev-graph-deploy-streamregistry-subgraph
        image: streamr/graph-deploy-streamregistry-subgraph:dev
        restart: on-failure # exits on success
        networks:
            - streamr-network
        depends_on:
            - graph-node
        volumes:
            - type: volume
              source: data-graph-deploy-legacy
              target: /firstrun
              volume:
                  nocopy: false
    deploy-network-subgraphs:
        container_name: streamr-dev-deploy-network-subgraphs
        image: streamr/deploy-network-subgraphs:dev
        restart: on-failure # exits on success
        networks:
            - streamr-network
        depends_on:
            - graph-node
        volumes:
            - type: volume
              source: data-graph-deploy
              target: /firstrun
              volume:
                  nocopy: false
    deploy-hub-subgraph:
        container_name: streamr-dev-deploy-hub-subgraph
        image: streamr/deploy-hub-subgraph:dev
        restart: on-failure # exits on success
        networks:
            - streamr-network
        depends_on:
            - graph-node
        volumes:
            - type: volume
              source: data-deploy-hub-subgraph
              target: /firstrun
              volume:
                  nocopy: false
    graph-deploy-dataunion-subgraph:
        container_name: streamr-dev-graph-deploy-dataunion-subgraph
        image: streamr/graph-deploy-dataunion-subgraph:dev
        restart: on-failure # exits on success
        networks:
            - streamr-network
        depends_on:
            - graph-node
        volumes:
            - type: volume
              source: data-graph-deploy-dataunion
              target: /firstrun
              volume:
                  nocopy: false
    graph-deploy-dataunion-subgraph-fastchain:
        container_name: streamr-dev-graph-deploy-dataunion-subgraph-fastchain
        image: streamr/graph-deploy-dataunion-subgraph:dev-fastchain
        restart: on-failure # exits on success
        networks:
            - streamr-network
        depends_on:
            - graph-node-fastchain
        volumes:
            - type: volume
              source: data-graph-deploy-dataunion-fastchain
              target: /firstrun
              volume:
                  nocopy: false
    graph-deploy-tatum-subgraph:
        container_name: streamr-dev-graph-deploy-tatum-subgraph
        image: streamr/graph-deploy-tatum-subgraph:dev
        restart: on-failure # exits on success
        networks:
            - streamr-network
        depends_on:
            - graph-node
        volumes:
            - type: volume
              source: data-graph-deploy-tatum
              target: /firstrun
              volume:
                  nocopy: false
    ipfs:
        container_name: streamr-dev-ipfs
        image: ipfs/kubo:v0.22.0
        networks:
            - streamr-network
        ports:
            - '5001:5001'
            - '6695:8080'
        volumes:
            - type: volume
              source: data-ipfs
              target: /data/ipfs
              volume:
                  nocopy: true
        environment:
            IPFS_PROFILE: server # sets the server profile
        healthcheck:
            test: ["CMD-SHELL", "ipfs --api=/ip4/127.0.0.1/tcp/5001 dag stat /ipfs/QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn || exit 1"] # from official image
            interval: 10s
            timeout: 3s
            retries: 10
    dev-chain-fast:
        container_name: streamr-dev-chain-fast
        image: streamr/dev-chain-fast:dev
        networks:
            - streamr-network
        ports:
            - "8547:8545"
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "--header", "Content-Type: application/json", "--data", '[{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1},{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}]', "http://localhost:8545/api/health"]
            interval: 1m30s
            timeout: 10s
            retries: 3
    graph-node-fastchain:
        container_name: streamr-dev-thegraph-node-fastchain
        image: graphprotocol/graph-node:v0.32.0
        restart: unless-stopped
        networks:
            - streamr-network
        ports:
            - '8800:8000'
            # - '8001:8001'
            - '8820:8020'
            # - '8030:8030'
            # - '8040:8040'
        depends_on:
            - ipfs
            - postgres-fastchain
            - dev-chain-fast
        environment:
            postgres_host: postgres-fastchain
            postgres_user: streamr
            postgres_pass: let-me-in
            postgres_db: streamr
            ipfs: 'streamr-dev-ipfs:5001'
            ethereum: 'xDai:http://streamr-dev-chain-fast:8545'
            RUST_LOG: info
            GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: "true"
        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "8000"]
            interval: 5s
            timeout: 10s
            retries: 10
    deploy-network-subgraphs-fastchain:
        container_name: streamr-dev-deploy-network-subgraphs-fastchain
        image: streamr/deploy-network-subgraphs:dev-fastchain
        restart: on-failure # exits on success
        networks:
            - streamr-network
        depends_on:
            - graph-node-fastchain
        volumes:
            - type: volume
              source: data-graph-deploy-fastchain
              target: /firstrun
              volume:
                  nocopy: false
    postgres-fastchain:
        container_name: streamr-dev-postgres-fastchain
        image: postgres
        restart: unless-stopped
        networks:
            - streamr-network
        # ports:
        #     - '5432:5432'
        command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
        environment:
            POSTGRES_USER: streamr
            POSTGRES_PASSWORD: let-me-in
            POSTGRES_DB: streamr
            POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
        volumes:
            - type: volume
              source: data-postgres-fastchain
              target: /var/lib/postgresql/data
              volume:
                  nocopy: true
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U streamr -d streamr"]
            interval: 5s
            timeout: 10s
            retries: 10
    postgres:
        container_name: streamr-dev-postgres
        image: postgres
        restart: unless-stopped
        networks:
            - streamr-network
        ports:
            - '5432:5432'
        command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
        environment:
            POSTGRES_USER: streamr
            POSTGRES_PASSWORD: let-me-in
            POSTGRES_DB: streamr
            POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
        volumes:
            - type: volume
              source: data-postgres
              target: /var/lib/postgresql/data
              volume:
                  nocopy: true
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U streamr -d streamr"]
            interval: 5s
            timeout: 10s
            retries: 10
    stream-metrics-index:
        container_name: streamr-dev-stream-metrics-index
        image: streamr/stream-metrics-index
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "4001:4001"
        depends_on:
            - mysql
            - graph-deploy-streamregistry-subgraph
            - tracker-1
            - tracker-2
            - tracker-3
    ens-sync-script:
        container_name: ens-sync-script
        image: streamr/ens-sync-script:dev
        networks:
            - streamr-network
        depends_on:
            - parity-node0
            - parity-sidechain-node0
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    ens-sync-script-fastchain:
        container_name: ens-sync-script-fastchain
        image: streamr/ens-sync-script:dev-fastchain
        networks:
            - streamr-network
        depends_on:
            - dev-chain-fast
        healthcheck:
            test: ["CMD", "/home/node/app/script/healthcheck.sh"]
            interval: 10s
            timeout: 10s
            retries: 60

networks:
    streamr-network:
        driver: bridge

volumes:
    cassandra_init_scripts:
    data-mysql:
    data-cassandra:
    data-parity-node0:
    data-parity-sidechain-node0:
    data-ipfs:
    data-postgres:
    data-postgres-fastchain:
    data-graph-deploy:
    data-graph-deploy-fastchain:
    data-graph-deploy-legacy:
    data-deploy-hub-subgraph:
    data-graph-deploy-dataunion:
    data-graph-deploy-dataunion-fastchain:
    data-graph-deploy-tatum:
