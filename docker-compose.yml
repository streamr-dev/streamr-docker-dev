version: "3"
services:
    cassandra:
        container_name: streamr-dev-cassandra
        image: streamr/cassandra:v0.0.1
        ports:
            - "7000:7000"
            - "7001:7001"
            - "7199:7199"
            - "9042:9042"
            - "9160:9160"
        volumes:
            - data-cassandra:/var/lib/cassandra
        healthcheck:
            test: ["CMD", "cqlsh", "-e", "SHOW HOST"]
            interval: 10s
            timeout: 10s
            retries: 60
    init-keyspace:
        container_name: streamr-dev-init-keyspace
        image: cassandra:3.11.5
        command: bash -c "sleep 5 && cqlsh cassandra -f /init_scripts/keyspace.cql && echo keyspace initialized"
        restart: on-failure # exits on success
        volumes:
            - ./cassandra_init_scripts:/init_scripts
        depends_on:
            - cassandra
    mysql:
        container_name: streamr-dev-mysql
        image: streamr/mysql:v0.0.1
        ports:
            - "3306:3306"
        volumes:
            - data-mysql:/var/lib/mysql:rw
            - ./mysql_init_scripts:/docker-entrypoint-initdb.d
            - ./custom-mysql-settings.cnf:/etc/mysql/conf.d/custom-mysql-settings.cnf
        restart: on-failure
        environment:
            MYSQL_ROOT_PASSWORD: password
    redis:
        container_name: streamr-dev-redis
        image: streamr/redis:v0.0.1
        ports:
            - "6379:6379"
    smtp:
        container_name: streamr-dev-smtp
        image: streamr/smtp:v0.0.1
        ports:
            - "25:25"
    nginx:
        container_name: streamr-dev-nginx
        image: nginx:stable-alpine
        restart: on-failure
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - ./custom-nginx-reverse-proxy.conf:/etc/nginx/nginx.conf:ro
          - ./certs:/etc/nginx/mounted-certs
        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "80"]
            interval: 10s
            timeout: 10s
            retries: 60
    tracker-1:
        container_name: streamr-dev-tracker-1
        image: streamr/broker-node:dev
        restart: on-failure
        ports:
            - "30301:30301"
        volumes:
          - ./certs:/certs
        command: node tracker.js 0xa4fc7b912ed4588080ac9f2044cb3d6cab961bcf0d96de6fa9e773860bf59e1c tracker-1 --port=30301 ${TRACKER_ARGS}
        healthcheck:
            test: ["CMD", "curl", "-sS", "${STREAMR_BASE_URL}:30301/topology/"]
            interval: 30s
            timeout: 10s
            retries: 20
    tracker-2:
        container_name: streamr-dev-tracker-2
        image: streamr/broker-node:dev
        restart: on-failure
        ports:
            - "30302:30302"
        volumes:
          - ./certs:/certs
        command: node tracker.js 0x3b328103c0d043cd1b34f1203c0313eb70c98443444dfdf7125f2d4479b89eb9 tracker-2 --port=30302 ${TRACKER_ARGS}
        healthcheck:
            test: ["CMD", "curl", "-sS", "${STREAMR_BASE_URL}:30302/topology/"]
            interval: 30s
            timeout: 10s
            retries: 20
    tracker-3:
        container_name: streamr-dev-tracker-3
        image: streamr/broker-node:dev
        restart: on-failure
        ports:
            - "30303:30303"
        volumes:
          - ./certs:/certs
        command: node tracker.js 0xf456bb2a958574416f4b9e1b1b642cb3092953aa6131aba6e36f7529d1137795 tracker-3 --port=30303 ${TRACKER_ARGS}
        healthcheck:
            test: ["CMD", "curl", "-sS", "${STREAMR_BASE_URL}:30303/topology/"]
            interval: 30s
            timeout: 10s
            retries: 20
    broker-node-storage-1:
        container_name: streamr-dev-broker-node-storage-1
        image: streamr/broker-node:dev
        restart: on-failure
        ports:
            - "8890:8890"
            - "8891:8891"
            - "9000:9000"
            - "30315:30315"
        depends_on:
            - init-keyspace
            - cassandra
            - tracker-1
            - tracker-2
            - tracker-3
        environment:
            STREAMR_URL: "${STREAMR_BASE_URL}"
            CASSANDRA_HOST: 10.200.10.1:9042
            CONFIG_FILE: configs/docker-1.env.json
        healthcheck:
            test: ["CMD", "curl", "-sS", "http://localhost:8891/api/v1/volume"]
            interval: 30s
            timeout: 10s
            retries: 20
    broker-node-no-storage-1:
        container_name: streamr-dev-broker-node-no-storage-1
        image: streamr/broker-node:dev
        restart: on-failure
        ports:
            - "8790:8790"
            - "8791:8791"
            - "9100:9100"
            - "30316:30316"
        depends_on:
            - tracker-1
            - tracker-2
            - tracker-3
        environment:
            STREAMR_URL: "${STREAMR_BASE_URL}"
            CONFIG_FILE: configs/docker-2.env.json
        healthcheck:
            test: ["CMD", "curl", "-sS", "http://localhost:8791/api/v1/volume"]
            interval: 30s
            timeout: 10s
            retries: 20
    broker-node-no-storage-2:
        container_name: streamr-dev-broker-node-no-storage-2
        image: streamr/broker-node:dev
        restart: on-failure
        ports:
            - "8690:8690"
            - "8691:8691"
            - "9200:9200"
            - "30317:30317"
        depends_on:
            - tracker-1
            - tracker-2
            - tracker-3
        environment:
            STREAMR_URL: "${STREAMR_BASE_URL}"
            CONFIG_FILE: configs/docker-3.env.json
        healthcheck:
            test: ["CMD", "curl", "-sS", "http://localhost:8691/api/v1/volume"]
            interval: 30s
            timeout: 10s
            retries: 20
    engine-and-editor:
        container_name: streamr-dev-engine-and-editor
        image: streamr/engine-and-editor:dev
        ports:
            - "8081:8081"
        depends_on:
            - init-keyspace
            - smtp
            - mysql
            - redis
            - parity-node0
        healthcheck:
            test: ["CMD", "curl", "-sS", "http://localhost:8081/streamr-core/api/v1/products"]
            interval: 30s
            timeout: 10s
            retries: 20
        environment:
            AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
            AWS_SECRET_KEY: "${AWS_SECRET_ACCESS_KEY}"
            FILEUPLOAD_S3_BUCKET: "${FILEUPLOAD_S3_BUCKET}"
            STREAMR_URL: "${STREAMR_BASE_URL}"
            HTTPS_API_SERVER: "${STREAMR_BASE_URL}/api/v1"
            WS_SERVER: "${STREAMR_WS_URL}"
            CPS_URL: "http://10.200.10.1:8085/dataunions/"
    ethereum-watcher:
        container_name: streamr-dev-ethereum-watcher
        image: streamr/ethereum-watcher:dev
        restart: on-failure
        depends_on:
            - parity-node0
            - engine-and-editor
        environment:
            STREAMR_API_URL: "${STREAMR_BASE_URL}/api/v1"
            METRICS: null
            ETHEREUM_SERVER_URL: "http://10.200.10.1:8545"
            MARKETPLACE_ADDRESS: "0xf1371c0f40528406dc4f4caf89924ea9da49e866"
            DEVOPS_KEY: "devops-user-key"
        volumes:
            - data-ethereum-watcher/:/app/logs
        healthcheck:
            test: ["CMD", "echo"] # TODO: Health check
            interval: 10s
            timeout: 10s
            retries: 60
    data-union-server:
        container_name: streamr-dev-data-union-server
        image: streamr/data-union-server:dev
        ports:
          - "8085:8085"
        restart: on-failure
        environment:
            ETHEREUM_SERVER: http://10.200.10.1:8545
            ETHEREUM_PRIVATE_KEY: 5e98cce00cff5dea6b454889f359a4ec06b9fa6b88e9d69b86de8e1c81887da0
            STREAMR_WS_URL: "${STREAMR_WS_URL}"
            STREAMR_HTTP_URL: "${STREAMR_BASE_URL}/api/v1"
            TOKEN_ADDRESS: "0xbaa81a0179015be47ad439566374f2bae098686f"
            REMOTE_SECRETS: "false"
        healthcheck:
            test: ["CMD", "curl", "-sS", "http://localhost:8085/dataunions"]
            interval: 10s
            timeout: 10s
            retries: 60
    platform:
        container_name: streamr-dev-platform
        image: streamr/platform:dev
        ports:
            - "3333:80"
        depends_on:
            - engine-and-editor
            - parity-node0
        healthcheck:
            test: ["CMD", "curl", "-sS", "http://localhost"]
            interval: 10s
            timeout: 10s
            retries: 60
        environment:
            DATA_UNIONS: "on"
    network-explorer:
        container_name: streamr-dev-network-explorer
        image: streamr/network-explorer:dev
        ports:
            - "3334:3000"
        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "3000"]
            interval: 10s
            timeout: 10s
            retries: 60
        stdin_open: true
        environment:
            PUBLIC_URL: "/network-explorer"
            REACT_APP_STREAMR_API_URL: "${STREAMR_BASE_URL}/api/v1"
            REACT_APP_TRACKER_REGISTRY_PROVIDER: "${STREAMR_BASE_URL}/mainchain-rpc/http/"
            REACT_APP_TRACKER_REGISTRY_ADDRESS: "0xBFCF120a8fD17670536f1B27D9737B775b2FD4CF"
            REACT_APP_MAPBOX_TOKEN: "pk.eyJ1IjoibWF0dGlubmVzIiwiYSI6ImNrNWhrN2FubDA0cGgzam1ycHV6Nmg2dHoifQ.HC5_Wu1R-OqRLza1u6P3Ig"
            REACT_APP_MOCK_API_URL: "${STREAMR_BASE_URL}/network-explorer-mock-api"
    parity-node0:
         container_name: streamr-dev-parity-node0
         environment:
            CHAIN_ID: 0x2323
         image: streamr/open-ethereum-poa-mainchain-preload1:dev
         ports:
           - "8545:8540"
           - "8450:8450"
           - "30309:30309"
         restart: on-failure
         healthcheck:
            test: ["CMD", "curl", "-sS", "http://localhost:8540"]
            interval: 1m30s
            timeout: 10s
            retries: 3
         command: --chain ./streamr-spec.json --config ./node0.toml
         volumes:
           - data-parity-node0/:/home/parity/parity_data
    parity-sidechain-node0:
         container_name: streamr-dev-parity-sidechain-node0
         environment:
            CHAIN_ID: 0x2325
         image: streamr/open-ethereum-poa-sidechain-preload1:dev
         ports:
           - "8546:8540"
           - "8451:8450"
           - "30310:30309"
         restart: on-failure
         healthcheck:
            test: ["CMD", "curl", "-sS", "http://localhost:8540"]
            interval: 1m30s
            timeout: 10s
            retries: 3
         command: --chain ./streamr-spec.json --config ./node0.toml
         volumes:
           - data-parity-sidechain-node0/:/home/parity/parity_data
    hsl-demo:
        restart: on-failure
        container_name: streamr-dev-hsl-demo
        image: streamr/hsl-demo:dev
        environment:
          REMOTE_SECRETS: "false"
        depends_on:
            - engine-and-editor
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
        command: mqtt-streamr --reconnect-on-data-timeout 10 --stream-id YpTAPDbvSAmj-iCUYz-dxA --streamr-url ${STREAMR_WS_URL} --streamr-rest-url ${STREAMR_BASE_URL}/api/v1 --mqtt-url wss://mqtt.hsl.fi --topic /hfp/v1/journey/ongoing/tram/# --api-key tester1-api-key
    rabbit:
        environment: ['RABBITMQ_NODENAME=node@rabbit']
        hostname: rabbit
        image: rabbitmq:3
        networks:
            - net_rabbit_bridge_request
            - net_rabbit_bridge_affirmation
            - net_rabbit_bridge_senderhome
            - net_rabbit_bridge_senderforeign
        restart: unless-stopped
        volumes: ['data-bridge-data-rabbitmq:/var/lib/rabbitmq/mnesia']
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    bridge_redis:
        command: [redis-server, --appendonly, 'yes']
        hostname: redis
        image: redis:4
        networks:
            - net_db_bridge_request
            - net_db_bridge_affirmation
            - net_db_bridge_senderhome
            - net_db_bridge_senderforeign
        restart: unless-stopped
        volumes: ['data-bridge-data-redis:/data']
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    bridge_request:
        image: poanetwork/tokenbridge-oracle:latest
        env_file:
            - ./oracles.env
        restart: unless-stopped
        entrypoint: yarn watcher:signature-request
        networks:
            - net_db_bridge_request
            - net_rabbit_bridge_request
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    bridge_affirmation:
        image: poanetwork/tokenbridge-oracle:latest
        env_file:
            - ./oracles.env
        restart: unless-stopped
        entrypoint: yarn watcher:affirmation-request
        networks:
            - net_db_bridge_affirmation
            - net_rabbit_bridge_affirmation
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    bridge_senderhome:
        image: poanetwork/tokenbridge-oracle:latest
        env_file:
            - ./oracles.env
        restart: unless-stopped
        entrypoint: yarn sender:home
        networks:
            - net_db_bridge_senderhome
            - net_rabbit_bridge_senderhome
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    bridge_senderforeign:
        image: poanetwork/tokenbridge-oracle:latest
        env_file:
            - ./oracles.env
        restart: unless-stopped
        entrypoint: yarn sender:foreign
        networks:
            - net_db_bridge_senderforeign
            - net_rabbit_bridge_senderforeign
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    bridge:
        image: tianon/true  # dummy image that does nothing
        depends_on:
            - bridge_senderforeign
            - bridge_senderhome
            - bridge_affirmation
            - rabbit
            - bridge_redis
            - bridge_request

networks:
    net_db_bridge_request:
        driver: bridge
    net_db_bridge_affirmation:
        driver: bridge
    net_db_bridge_senderhome:
        driver: bridge
    net_db_bridge_senderforeign:
        driver: bridge
    net_rabbit_bridge_request:
        driver: bridge
    net_rabbit_bridge_affirmation:
        driver: bridge
    net_rabbit_bridge_senderhome:
        driver: bridge
    net_rabbit_bridge_senderforeign:
        driver: bridge

volumes:
    mysql_init_scripts:
    cassandra_init_scripts:
    cassandra_init_scripts:
    data-bridge-data-rabbitmq:
    data-bridge-data-redis:
    data-mysql:
    data-cassandra:
    data-parity-node0:
    data-parity-sidechain-node0:
    data-ethereum-watcher:
