---
version: "3.8"
services:
    cassandra:
        container_name: streamr-dev-cassandra
        image: cassandra:3.11.5
        init: true
        networks:
            - streamr-network
        ports:
            - "7000:7000"
            - "7001:7001"
            - "7199:7199"
            - "9042:9042"
            - "9160:9160"
        volumes:
            - type: volume
              source: data-cassandra
              target: /var/lib/cassandra
              volume:
                  nocopy: true
        restart: unless-stopped
    init-keyspace:
        container_name: streamr-dev-init-keyspace
        image: cassandra:3.11.5
        init: true
        networks:
            - streamr-network
        command: bash -c "sleep 5 && cqlsh cassandra -f /init_scripts/keyspace.cql && echo keyspace initialized"
        restart: on-failure # exits on success
        volumes:
            - type: bind
              source: ./cassandra_init_scripts
              target: /init_scripts
              read_only: true
              bind:
                  propagation: rprivate
        depends_on:
            - cassandra
    mysql:
        container_name: streamr-dev-mysql
        platform: linux/x86_64
        image: mysql:5.7
        init: true
        networks:
            - streamr-network
        ports:
            - "3306:3306"
        volumes:
            - type: volume
              source: data-mysql
              target: /var/lib/mysql
              volume:
                  nocopy: true
            - type: bind
              source: ./mysql_init_scripts
              target: /docker-entrypoint-initdb.d
              read_only: true
              bind:
                  propagation: rprivate
            - type: bind
              source: ./custom-mysql-settings.cnf
              target: /etc/mysql/conf.d/custom-mysql-settings.cnf
              read_only: true
              bind:
                  propagation: rprivate
        restart: unless-stopped
        environment:
            MYSQL_ROOT_PASSWORD: password
    redis:
        container_name: streamr-dev-redis
        image: redis
        networks:
            - streamr-network
        ports:
            - "6379:6379"
        restart: unless-stopped
        volumes:
            - type: volume
              source: data-bridge-data-redis
              target: /data
              volume:
                  nocopy: true
    smtp:
        container_name: streamr-dev-smtp
        image: streamr/smtp:v0.0.1
        networks:
            - streamr-network
        ports:
            - "25:25"
    nginx:
        container_name: streamr-dev-nginx
        image: streamr/nginx:v0.0.3
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - type: bind
              source: ./custom-nginx-reverse-proxy.conf
              target: /etc/nginx/nginx.conf
              read_only: true
              bind:
                  propagation: rprivate
            - type: bind
              source: ./certs
              target: /etc/nginx/mounted-certs
              read_only: true
              bind:
                  propagation: rprivate
    tracker-1:
        container_name: streamr-dev-tracker-1
        image: streamr/tracker:dev
        platform: linux/x86_64
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "30301:30301"
        volumes:
            - type: bind
              source: ./certs
              target: /certs
              read_only: true
              bind:
                  propagation: rprivate
        command: npm exec -- streamr-tracker 0xe5abc5ee43b8830e7b0f98d03efff5d6cae574d52a43204528eab7b52cd6408d tracker-1 --port=30301 ${TRACKER_ARGS}
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "--insecure", "${STREAMR_BASE_URL}:30301/topology/"]
            interval: 30s
            timeout: 10s
            retries: 20
    tracker-2:
        container_name: streamr-dev-tracker-2
        image: streamr/tracker:dev
        platform: linux/x86_64
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "30302:30302"
        volumes:
            - type: bind
              source: ./certs
              target: /certs
              read_only: true
              bind:
                  propagation: rprivate
        command: npm exec -- streamr-tracker 0x96de9d06f9e409119a2cd9b57dfc326f66d953a0418f3937b92c8930f930893c tracker-2 --port=30302 ${TRACKER_ARGS}
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "--insecure", "${STREAMR_BASE_URL}:30302/topology/"]
            interval: 30s
            timeout: 10s
            retries: 20
    tracker-3:
        container_name: streamr-dev-tracker-3
        image: streamr/tracker:dev
        platform: linux/x86_64
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "30303:30303"
        volumes:
            - type: bind
              source: ./certs
              target: /certs
              read_only: true
              bind:
                  propagation: rprivate
        command: npm exec -- streamr-tracker 0x6117b7a7cb8f3c8d40e3b7e87823c11af7f401515bc4fdf2bfdda70f1b833027 tracker-3 --port=30303 ${TRACKER_ARGS}
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "--insecure", "${STREAMR_BASE_URL}:30303/topology/"]
            interval: 30s
            timeout: 10s
            retries: 20
    broker-node-storage-1:
        container_name: streamr-dev-broker-node-storage-1
        image: streamr/broker-node:dev
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "8890:8890"
            - "8891:8891"
            - "9000:9000"
            - "30315:30315"
        depends_on:
            - init-keyspace
            - cassandra
            - tracker-1
            - tracker-2
            - tracker-3
        environment:
            STREAMR_URL: "${STREAMR_BASE_URL}"
            CASSANDRA_HOST: 10.200.10.1:9042
        command: npm exec -- streamr-broker configs/docker-1.env.json
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "http://localhost:8891/info"]
            interval: 30s
            timeout: 10s
            retries: 20
    broker-node-no-storage-1:
        container_name: streamr-dev-broker-node-no-storage-1
        image: streamr/broker-node:dev
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "8790:8790"
            - "8791:8791"
            - "9100:9100"
            - "30316:30316"
        depends_on:
            - tracker-1
            - tracker-2
            - tracker-3
        environment:
            STREAMR_URL: "${STREAMR_BASE_URL}"
        command: npm exec -- streamr-broker configs/docker-2.env.json
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "http://localhost:8791/info"]
            interval: 30s
            timeout: 10s
            retries: 20
    broker-node-no-storage-2:
        container_name: streamr-dev-broker-node-no-storage-2
        image: streamr/broker-node:dev
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "8690:8690"
            - "8691:8691"
            - "9200:9200"
            - "30317:30317"
        depends_on:
            - tracker-1
            - tracker-2
            - tracker-3
        environment:
            STREAMR_URL: "${STREAMR_BASE_URL}"
        command: npm exec -- streamr-broker configs/docker-3.env.json
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "http://localhost:8691/info"]
            interval: 30s
            timeout: 10s
            retries: 20
    core-api:
        container_name: streamr-dev-core-api
        image: streamr/core-api:dev
        networks:
            - streamr-network
        ports:
            - "8081:8081"
        depends_on:
            - init-keyspace
            - smtp
            - mysql
            - redis
            - parity-node0
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "http://localhost:8081/streamr-core/api/v2/products"]
            interval: 30s
            timeout: 10s
            retries: 20
        environment:
            AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
            AWS_SECRET_KEY: "${AWS_SECRET_ACCESS_KEY}"
            FILEUPLOAD_S3_BUCKET: "${FILEUPLOAD_S3_BUCKET}"
            STREAMR_URL: "${STREAMR_BASE_URL}"
            HTTPS_API_SERVER: "${STREAMR_BASE_URL}/api/v2"
            WS_SERVER: "${STREAMR_WS_URL}"
            CPS_URL: "http://10.200.10.1:8085/dataunions/"
    ethereum-watcher:
        container_name: streamr-dev-ethereum-watcher
        image: streamr/ethereum-watcher:dev
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        depends_on:
            - parity-node0
            - parity-sidechain-node0
            - core-api
        environment:
            STREAMR_API_URL: "${STREAMR_BASE_URL}/api/v2"
            DEVOPS_KEY: "0x628acb12df34bb30a0b2f95ec2e6a743b386c5d4f63aa9f338bec6f613160e78"
            NETWORK_ID: "8995"
            MARKETPLACE_ADDRESS: "0x56e57Bf7422eDe1ED75520D4387829feEe8a8319"
            MATIC_SERVER_URL: "http://10.200.10.1:8546"
            STREAM_REGISTRY_ADDRESS: "0x6cCdd5d866ea766f6DF5965aA98DeCCD629ff222"
            ETHEREUM_SERVER_URL: "http://10.200.10.1:8545"
        volumes:
            - type: volume
              source: data-ethereum-watcher
              target: /app/logs
              volume:
                  nocopy: true
        healthcheck:
            test: ["CMD", "echo"] # TODO: Health check
            interval: 10s
            timeout: 10s
            retries: 60
    ethereum-watcher-sidechain:
        container_name: streamr-dev-ethereum-watcher-sidechain
        image: streamr/ethereum-watcher:dev
        init: true
        networks:
            - streamr-network
        restart: unless-stopped
        depends_on:
            - parity-sidechain-node0
            - core-api
        environment:
            STREAMR_API_URL: "${STREAMR_BASE_URL}/api/v2"
            DEVOPS_KEY: "0x628acb12df34bb30a0b2f95ec2e6a743b386c5d4f63aa9f338bec6f613160e78"
            NETWORK_ID: "8997"
            MARKETPLACE_ADDRESS: "0xa072C42CB167d68D4c1cA15d0e4d0bd93E74A80f"
            ETHEREUM_SERVER_URL: "http://10.200.10.1:8546"
            MATIC_SERVER_URL: "http://10.200.10.1:8546"
            STREAM_REGISTRY_ADDRESS: "0x6cCdd5d866ea766f6DF5965aA98DeCCD629ff222"
        volumes:
            - type: volume
              source: data-ethereum-watcher-sidechain
              target: /app/logs
              volume:
                  nocopy: true
        healthcheck:
            test: ["CMD", "echo"] # TODO: Health check
            interval: 10s
            timeout: 10s
            retries: 60
    platform:
        container_name: streamr-dev-platform
        image: streamr/platform:dev
        networks:
            - streamr-network
        ports:
            - "3333:80"
        depends_on:
            - core-api
            - parity-node0
        environment:
            DATA_UNIONS: "on"
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "http://localhost"]
            interval: 10s
            timeout: 10s
            retries: 60
    network-explorer:
        container_name: streamr-dev-network-explorer
        image: streamr/network-explorer:dev
        networks:
            - streamr-network
        ports:
            - "3334:80"
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "http://localhost"]
            interval: 10s
            timeout: 10s
            retries: 60
    parity-node0:
        container_name: streamr-dev-parity-node0
        environment:
            CHAIN_ID: 0x2323
        image: streamr/open-ethereum-poa-mainchain-preload1:dev
        networks:
            - streamr-network
        ports:
            - "8545:8540"
            - "8450:8450"
            - "30309:30309"
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "--header", "Content-Type: application/json", "--data", '[{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1},{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}]', "http://localhost:8540/api/health"]
            interval: 1m30s
            timeout: 10s
            retries: 3
        command: --chain ./streamr-spec.json --config ./node0.toml
        volumes:
            - type: volume
              source: data-parity-node0
              target: /home/parity/parity_data
              volume:
                  nocopy: true
    parity-sidechain-node0:
        container_name: streamr-dev-parity-sidechain-node0
        environment:
            CHAIN_ID: 0x2325
        image: streamr/open-ethereum-poa-sidechain-preload1:dev
        networks:
            - streamr-network
        ports:
            - "8546:8540"
            - "8451:8450"
            - "30310:30309"
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "curl", "--fail", "--silent", "--show-error", "--max-time", "9", "--header", "Content-Type: application/json", "--data", '[{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1},{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}]', "http://localhost:8540/api/health"]
            interval: 1m30s
            timeout: 10s
            retries: 3
        command: --chain ./streamr-spec.json --config ./node0.toml
        volumes:
            - type: volume
              source: data-parity-sidechain-node0
              target: /home/parity/parity_data
              volume:
                  nocopy: true
    bridge-rabbitmq:
        container_name: streamr-dev-bridge-rabbitmq
        environment: ['RABBITMQ_NODENAME=node@bridge-rabbitmq']
        hostname: bridge-rabbitmq
        image: rabbitmq:3
        networks:
            - streamr-network
        restart: unless-stopped
        volumes:
            - type: volume
              source: data-bridge-data-rabbitmq
              target: /var/lib/rabbitmq/mnesia
              volume:
                  nocopy: true
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    bridge-request:
        container_name: streamr-dev-bridge-request
        image: poanetwork/tokenbridge-oracle:latest
        networks:
            - streamr-network
        env_file:
            - ./oracles.env
        restart: unless-stopped
        entrypoint: yarn watcher:signature-request
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    bridge-affirmation:
        container_name: streamr-dev-bridge-affirmation
        image: poanetwork/tokenbridge-oracle:latest
        networks:
            - streamr-network
        env_file:
            - ./oracles.env
        restart: unless-stopped
        entrypoint: yarn watcher:affirmation-request
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    bridge-senderhome:
        container_name: streamr-dev-bridge-senderhome
        image: poanetwork/tokenbridge-oracle:latest
        init: true
        networks:
            - streamr-network
        env_file:
            - ./oracles.env
        restart: unless-stopped
        entrypoint: yarn sender:home
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    bridge-senderforeign:
        container_name: streamr-dev-bridge-senderforeign
        image: poanetwork/tokenbridge-oracle:latest
        networks:
            - streamr-network
        env_file:
            - ./oracles.env
        restart: unless-stopped
        entrypoint: yarn sender:foreign
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    bridge:
        container_name: streamr-dev-bridge
        image: tianon/true  # dummy image that does nothing
        networks:
            - streamr-network
        depends_on:
            - bridge-senderforeign
            - bridge-senderhome
            - bridge-affirmation
            - bridge-rabbitmq
            - redis
            - bridge-request
    graph-node:
        container_name: streamr-dev-thegraph-node
        image: graphprotocol/graph-node:v0.27.0
        restart: unless-stopped
        networks:
            - streamr-network
        ports:
            - '8000:8000'
            - '8001:8001'
            - '8020:8020'
            - '8030:8030'
            - '8040:8040'
        depends_on:
            - ipfs
            - postgres
            - parity-sidechain-node0
        environment:
            postgres_host: postgres
            postgres_user: streamr
            postgres_pass: let-me-in
            postgres_db: streamr
            ipfs: 'streamr-dev-ipfs:5001'
            ethereum: 'xDai:http://streamr-dev-parity-sidechain-node0:8540'
            RUST_LOG: info
            GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: "true"
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    graph-deploy-streamregistry-subgraph:
        container_name: streamr-dev-graph-deploy-streamreg-subgraph
        image: streamr/graph-deploy-streamregistry-subgraph:dev
        restart: on-failure # exits on success
        networks:
            - streamr-network
        depends_on:
            - graph-node
        volumes:
            - type: volume
              source: data-graph-deploy
              target: /firstrun
              volume:
                  nocopy: false
    deploy-hub-subgraph:
        container_name: streamr-dev-deploy-hub-subgraph
        image: streamr/deploy-hub-subgraph:dev
        restart: on-failure # exits on success
        networks:
            - streamr-network
        depends_on:
            - graph-node
        volumes:
            - type: volume
              source: data-deploy-hub-subgraph
              target: /firstrun
              volume:
                  nocopy: false
    graph-deploy-dataunion-subgraph:
        container_name: streamr-dev-graph-deploy-dataunion-subgraph
        image: streamr/graph-deploy-dataunion-subgraph:dev
        restart: on-failure # exits on success
        networks:
            - streamr-network
        depends_on:
            - graph-node
        volumes:
            - type: volume
              source: data-graph-deploy-dataunion
              target: /firstrun
              volume:
                  nocopy: false
    graph-deploy-tatum-subgraph:
        container_name: streamr-dev-graph-deploy-tatum-subgraph
        image: streamr/graph-deploy-tatum-subgraph:dev
        restart: on-failure # exits on success
        networks:
            - streamr-network
        depends_on:
            - graph-node
        volumes:
            - type: volume
              source: data-graph-deploy-tatum
              target: /firstrun
              volume:
                  nocopy: false
    ipfs:
        container_name: streamr-dev-ipfs
        image: ipfs/go-ipfs:v0.11.0
        networks:
            - streamr-network
        ports:
            - '5001:5001'
            - '6695:8080'
        volumes:
            - type: volume
              source: data-ipfs
              target: /data/ipfs
              volume:
                  nocopy: true
        environment:
            IPFS_PROFILE: server # sets the server profile
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    postgres:
        container_name: streamr-dev-postgres
        image: postgres
        restart: unless-stopped
        networks:
            - streamr-network
        ports:
            - '5432:5432'
        command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
        environment:
            POSTGRES_USER: streamr
            POSTGRES_PASSWORD: let-me-in
            POSTGRES_DB: streamr
        volumes:
            - type: volume
              source: data-postgres
              target: /var/lib/postgresql/data
              volume:
                  nocopy: true
            - type: bind
              source: ./postgres_init_scripts
              target: /docker-entrypoint-initdb.d
              read_only: true
              bind:
                  propagation: rprivate
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    chainlink:
        container_name: streamr-dev-chainlink-node
        image: smartcontract/chainlink:0.10.5
        networks:
            - streamr-network
        ports:
            - '6688:6688'
        entrypoint: ""
        command: bash -c "echo \"sleeping for 5s\" && sleep 5 && chainlink local n -p /chainlink/.password -a /chainlink/.api"
        env_file:
            - ./chainlink_config/.env_streamr_sidechain
        volumes:
            - type: bind
              source: ./chainlink_config
              target: /chainlink
              bind:
                  propagation: rprivate
        user: ${CURRENT_UID}
        depends_on:
            - parity-sidechain-node0
            - postgres
            - chainlink-external-adapter
        healthcheck:
            test: ["CMD", "wget", "--timeout=9", "--tries=1", "--quiet", "-O-", "http://localhost:6688"]
            interval: 30s
            timeout: 10s
            retries: 20
        restart: on-failure
    chainlink-external-adapter:
        container_name: streamr-dev-chainlink-adapter
        image: streamr/chainlink-external-adapter:dev
        networks:
            - streamr-network
        ports:
            - 6691:8080
        depends_on:
            - parity-node0
        healthcheck:
            test: ["CMD", "echo"] # TODO: health check
            interval: 10s
            timeout: 10s
            retries: 60
    stream-metrics-index:
        container_name: streamr-dev-stream-metrics-index
        image: streamr/stream-metrics-index
        networks:
            - streamr-network
        restart: unless-stopped
        ports:
            - "4001:4001"
        depends_on:
            - mysql
            - graph-deploy-streamregistry-subgraph
            - tracker-1
            - tracker-2
            - tracker-3

networks:
    streamr-network:
        driver: bridge

volumes:
    mysql_init_scripts:
    cassandra_init_scripts:
    data-bridge-data-rabbitmq:
    data-bridge-data-redis:
    data-mysql:
    data-cassandra:
    data-parity-node0:
    data-parity-sidechain-node0:
    data-ethereum-watcher:
    data-ethereum-watcher-sidechain:
    data-ipfs:
    data-postgres:
    data-graph-deploy:
    data-deploy-hub-subgraph:
    data-graph-deploy-dataunion:
    data-graph-deploy-tatum:
